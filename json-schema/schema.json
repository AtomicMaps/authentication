{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://stac-extensions.github.io/secure-assets/v1.0.0/schema.json#",
  "title": "Secure Assets Extension",
  "description": "STAC Secure Assets Extension for STAC Items and STAC Collections.",
  "oneOf": [
    {
      "$comment": "This is the schema for STAC Items. Remove this object if this extension only applies to Collections.",
      "allOf": [
        {
          "$ref": "#/definitions/stac_extensions"
        },
        {
          "type": "object",
          "required": [
            "type",
            "properties",
            "assets"
          ],
          "properties": {
            "type": {
              "const": "Feature"
            },
            "properties": {
              "allOf": [
                {
                  "$comment": "Require fields here for Item Properties.",
                  "required": [
                    "security:schemes"
                  ]
                },
                {
                  "$ref": "#/definitions/fields"
                }
              ]
            },
            "assets": {
              "$comment": "This validates the fields in Item Assets, but does not require them.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/fields"
              }
            }
          }
        }
      ]
    },
    {
      "$comment": "This is the schema for STAC Collections.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "const": "Collection"
            }
          }
        },
        {
          "$ref": "#/definitions/stac_extensions"
        }
      ],
      "anyOf": [
        {
          "$comment": "This is the schema for the top-level fields in a Collection. Remove this if this extension does not define top-level fields for Collections.",
          "allOf": [
            {
              "$comment": "Require fields here for Collections (top-level).",
              "required": [
                "security:schema"
              ]
            },
            {
              "$ref": "#/definitions/fields"
            }
          ]
        },
        {
          "$comment": "This validates the fields in Collection Assets, but does not require them.",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "type": "object",
              "not": {
                "additionalProperties": {
                  "not": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/require_any_field"
                      },
                      {
                        "$ref": "#/definitions/fields"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "$comment": "This is the schema for the fields in Item Asset Definitions. It doesn't require any fields.",
          "required": [
            "item_assets"
          ],
          "properties": {
            "item_assets": {
              "type": "object",
              "not": {
                "additionalProperties": {
                  "not": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/require_any_field"
                      },
                      {
                        "$ref": "#/definitions/fields"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        {
          "$comment": "This is the schema for the fields in Summaries. By default, only checks the existence of the properties, but not the schema of the summaries.",
          "required": [
            "summaries"
          ],
          "properties": {
            "summaries": {
              "$ref": "#/definitions/require_any_field"
            }
          }
        }
      ]
    }



  ],
  "definitions": {
    "stac_extensions": {
      "type": "object",
      "required": [
        "stac_extensions"
      ],
      "properties": {
        "stac_extensions": {
          "type": "array",
          "contains": {
            "const": "https://stac-extensions.github.io/secure-assets/v1.0.0/schema.json"
          }
        }
      }
    },
    "require_any_field": {
      "$comment": "Please list all fields here so that we can force the existence of one of them in other parts of the schemas.",
      "anyOf": [
        {"required": ["security:schemas"]}
      ]
    },
    "fields": {
      "$comment": "Add your new fields here. Don't require them here, do that above in the corresponding schema.",
      "type": "object",
      "properties": {
        "security:schemas": {
          "type": "object",
          "properties": {
            "type": {
              "title": "Scheme keyword",
              "type": "string",
              "examples": [
                "http",
                "s3",
                "planetaryComputer",
                "earthdata",
                "signedUrl",
                "oauth2",
                "apiKey",
                "openIdConnect"
              ]
            },
            "description": {
              "title": "Authentication scheme description",
              "type": "string"
            },
            "name": {
              "title": "API Key header, query, or cookie parameter name",
              "type": "string"
            },
            "in": {
              "title": "Location of the API Key",
              "type": "string",
              "examples": [
                "query",
                "header",
                "cookie"
              ]
            },
            "scheme": {
              "title": "Name of the http authentication scheme",
              "type": "string",
              "examples": [
                "basic",
                "bearer"
              ]
            },
            "flows": {
              "title": "Scenarios an API client performs to get an access token from the authorization server",
              "type": "object",
              "properties": {
                "authorizationUrl": {
                  "title": "The authorization URL to be used",
                  "type": "string"
                },
                "tokenUrl": {
                  "title": "The token URL to be used",
                  "type": "string"
                },
                "authorizationApi": {
                  "title": "The signed URL API endpoint to be used",
                  "type": "string"
                },
                "refreshUrl": {
                  "title": "The URL to be used for obtaining refresh tokens",
                  "type": "string"
                },
                "scopes": {
                  "title": "The available scopes for the authentication scheme",
                  "type": "object"
                }
              },
              "examples": [
                "authorizationCode",
                "implicit", 
                "password",
                "clientCredentials",
                "signedUrl"
              ]
            },
            "openConnectUrl": {
              "title": "Scenarios an API client performs to get an access token from the authorization server",
              "type": "object"
            }
          }
        },
        "security:refs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "patternProperties": {
        "^(?!security:)": {
          "$comment": "Above, change `template` to the prefix of this extension"
        }
      },
      "additionalProperties": false
    }
  }
}
